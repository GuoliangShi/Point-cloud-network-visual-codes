#include <pcl/point_cloud.h>
#include <pcl/io/io.h>
#include <pcl/io/pcd_io.h>
#include <pcl/visualization/cloud_viewer.h>
#include <pcl/filters/passthrough.h>
#include <iostream>
#include <string>

using namespace pcl;
using namespace std;


int main(int argc, char** argv)
{
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud1(new pcl::PointCloud<pcl::PointXYZRGB>);
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud2(new pcl::PointCloud<pcl::PointXYZRGB>);
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud3(new pcl::PointCloud<pcl::PointXYZRGB>);
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud4(new pcl::PointCloud<pcl::PointXYZRGB>);
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud1_filter(new pcl::PointCloud<pcl::PointXYZRGB>);
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud2_filter(new pcl::PointCloud<pcl::PointXYZRGB>);
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud3_filter(new pcl::PointCloud<pcl::PointXYZRGB>);
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud4_filter(new pcl::PointCloud<pcl::PointXYZRGB>);
	string input_path;
	cout << "Input film path: ";
	getline(cin, input_path);
	string path1 = "C:/Users/13427/Desktop/第二篇论文修改/论文数据文件/REAL/" + input_path + "_real.pcd";
	string path2 = "C:/Users/13427/Desktop/第二篇论文修改/论文数据文件/Pred_GT/" + input_path + "_pred_gt.pcd";
	string path3 = "C:/Users/13427/Desktop/第二篇论文修改/论文数据文件/Pred_ORG/" + input_path + "_pred.pcd";
	string path4 = "C:/Users/13427/Desktop/第二篇论文修改/论文数据文件/Pred_UP/" + input_path + "_pred.pcd";
	pcl::io::loadPCDFile(path1, *cloud1);
	pcl::io::loadPCDFile(path2, *cloud2);
	pcl::io::loadPCDFile(path3, *cloud3);
	pcl::io::loadPCDFile(path4, *cloud4);

	cout << "Please input direction: ";
	string dir;
	cin >> dir;
	cout << "Please input limited values: ";
	double min_val, max_val;
	cin >> min_val >> max_val;

	// xyz大方向上的剪切
	pcl::PassThrough<pcl::PointXYZRGB> pass1;
	pass1.setInputCloud(cloud1);
	pass1.setFilterFieldName(dir);
	pass1.setFilterLimits(min_val, max_val);
	pass1.filter(*cloud1_filter);

	pcl::PassThrough<pcl::PointXYZRGB> pass2;
	pass2.setInputCloud(cloud2);
	pass2.setFilterFieldName(dir);
	pass2.setFilterLimits(min_val, max_val);
	pass2.filter(*cloud2_filter);

	pcl::PassThrough<pcl::PointXYZRGB> pass3;
	pass3.setInputCloud(cloud3);
	pass3.setFilterFieldName(dir);
	pass3.setFilterLimits(min_val, max_val);
	pass3.filter(*cloud3_filter);

	pcl::PassThrough<pcl::PointXYZRGB> pass4;
	pass4.setInputCloud(cloud4);
	pass4.setFilterFieldName(dir);
	pass4.setFilterLimits(min_val, max_val);
	pass4.filter(*cloud4_filter);

	//创建3D窗口并添加显示点云其包括法线
	boost::shared_ptr<pcl::visualization::PCLVisualizer> viewer(new pcl::visualization::PCLVisualizer("3D Viewer"));
	viewer->initCameraParameters();
	int v1(0);
	viewer->createViewPort(0.0, 0.0, 0.5, 0.5, v1);
	viewer->setBackgroundColor(1, 1, 1, v1);
	//viewer->addText("Get the stem", 10, 10, "v1 text", v1);
	pcl::visualization::PointCloudColorHandlerRGBField<pcl::PointXYZRGB> rgb1(cloud3_filter);
	viewer->addPointCloud<pcl::PointXYZRGB>(cloud3_filter, rgb1, "sample cloud1", v1);
	int v2(0);
	viewer->createViewPort(0.5, 0.0, 1.0, 0.5, v2);
	viewer->setBackgroundColor(1.0, 1.0, 1.0, v2);
	//viewer->addText("Plant leaf", 10, 10, "v2 text", v2);
	pcl::visualization::PointCloudColorHandlerRGBField<pcl::PointXYZRGB> rgb2(cloud4_filter);
	viewer->addPointCloud<pcl::PointXYZRGB>(cloud4_filter, rgb2, "sample cloud2", v2);
	int v3(0);
	viewer->createViewPort(0.0, 0.5, 0.5, 1.0, v3);
	viewer->setBackgroundColor(1, 1, 1, v3);
	//viewer->addText("The original point cloud", 10, 10, "v3 text", v3);
	pcl::visualization::PointCloudColorHandlerRGBField<pcl::PointXYZRGB> rgb3(cloud1_filter);
	viewer->addPointCloud<pcl::PointXYZRGB>(cloud1_filter, rgb3, "sample cloud3", v3);
	int v4(0);
	viewer->createViewPort(0.5, 0.5, 1.0, 1.0, v4);
	viewer->setBackgroundColor(1, 1, 1, v4);
	//viewer->addText("Euclidean clustering segmentation point cloud", 10, 10, "v4 text", v4);
	pcl::visualization::PointCloudColorHandlerRGBField<pcl::PointXYZRGB> rgb4(cloud2_filter);
	viewer->addPointCloud<pcl::PointXYZRGB>(cloud2_filter, rgb4, "sample cloud4", v4);

	viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 2, "sample cloud1");
	viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 2, "sample cloud2");
	viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 2, "sample cloud3");
	viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 2, "sample cloud4");
	viewer->addCoordinateSystem(0.2);
	while (!viewer->wasStopped())
	{
		viewer->spinOnce(100);
		boost::this_thread::sleep(boost::posix_time::microseconds(100000));
	}
	return (0);
}
